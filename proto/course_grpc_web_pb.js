/**
 * @fileoverview gRPC-Web generated client stub for pb
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.19.1
// source: course.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var empty_pb = require('./empty_pb.js')

var unit_pb = require('./unit_pb.js')

var syllabus_pb = require('./syllabus_pb.js')

var instructor_pb = require('./instructor_pb.js')
const proto = {};
proto.pb = require('./course_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.pb.CourseServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.pb.CourseServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.pb.CreateCourseRequest,
 *   !proto.pb.Course>}
 */
const methodDescriptor_CourseService_Create = new grpc.web.MethodDescriptor(
  '/pb.CourseService/Create',
  grpc.web.MethodType.UNARY,
  proto.pb.CreateCourseRequest,
  proto.pb.Course,
  /**
   * @param {!proto.pb.CreateCourseRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.pb.Course.deserializeBinary
);


/**
 * @param {!proto.pb.CreateCourseRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.pb.Course)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.pb.Course>|undefined}
 *     The XHR Node Readable Stream
 */
proto.pb.CourseServiceClient.prototype.create =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/pb.CourseService/Create',
      request,
      metadata || {},
      methodDescriptor_CourseService_Create,
      callback);
};


/**
 * @param {!proto.pb.CreateCourseRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.pb.Course>}
 *     Promise that resolves to the response
 */
proto.pb.CourseServicePromiseClient.prototype.create =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/pb.CourseService/Create',
      request,
      metadata || {},
      methodDescriptor_CourseService_Create);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.pb.GetCourseRequest,
 *   !proto.pb.Course>}
 */
const methodDescriptor_CourseService_Get = new grpc.web.MethodDescriptor(
  '/pb.CourseService/Get',
  grpc.web.MethodType.UNARY,
  proto.pb.GetCourseRequest,
  proto.pb.Course,
  /**
   * @param {!proto.pb.GetCourseRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.pb.Course.deserializeBinary
);


/**
 * @param {!proto.pb.GetCourseRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.pb.Course)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.pb.Course>|undefined}
 *     The XHR Node Readable Stream
 */
proto.pb.CourseServiceClient.prototype.get =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/pb.CourseService/Get',
      request,
      metadata || {},
      methodDescriptor_CourseService_Get,
      callback);
};


/**
 * @param {!proto.pb.GetCourseRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.pb.Course>}
 *     Promise that resolves to the response
 */
proto.pb.CourseServicePromiseClient.prototype.get =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/pb.CourseService/Get',
      request,
      metadata || {},
      methodDescriptor_CourseService_Get);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.pb.SearchCourseRequest,
 *   !proto.pb.SearchCourseResponse>}
 */
const methodDescriptor_CourseService_Search = new grpc.web.MethodDescriptor(
  '/pb.CourseService/Search',
  grpc.web.MethodType.UNARY,
  proto.pb.SearchCourseRequest,
  proto.pb.SearchCourseResponse,
  /**
   * @param {!proto.pb.SearchCourseRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.pb.SearchCourseResponse.deserializeBinary
);


/**
 * @param {!proto.pb.SearchCourseRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.pb.SearchCourseResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.pb.SearchCourseResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.pb.CourseServiceClient.prototype.search =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/pb.CourseService/Search',
      request,
      metadata || {},
      methodDescriptor_CourseService_Search,
      callback);
};


/**
 * @param {!proto.pb.SearchCourseRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.pb.SearchCourseResponse>}
 *     Promise that resolves to the response
 */
proto.pb.CourseServicePromiseClient.prototype.search =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/pb.CourseService/Search',
      request,
      metadata || {},
      methodDescriptor_CourseService_Search);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.pb.UpdateCourseRequest,
 *   !proto.pb.Course>}
 */
const methodDescriptor_CourseService_Update = new grpc.web.MethodDescriptor(
  '/pb.CourseService/Update',
  grpc.web.MethodType.UNARY,
  proto.pb.UpdateCourseRequest,
  proto.pb.Course,
  /**
   * @param {!proto.pb.UpdateCourseRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.pb.Course.deserializeBinary
);


/**
 * @param {!proto.pb.UpdateCourseRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.pb.Course)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.pb.Course>|undefined}
 *     The XHR Node Readable Stream
 */
proto.pb.CourseServiceClient.prototype.update =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/pb.CourseService/Update',
      request,
      metadata || {},
      methodDescriptor_CourseService_Update,
      callback);
};


/**
 * @param {!proto.pb.UpdateCourseRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.pb.Course>}
 *     Promise that resolves to the response
 */
proto.pb.CourseServicePromiseClient.prototype.update =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/pb.CourseService/Update',
      request,
      metadata || {},
      methodDescriptor_CourseService_Update);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.pb.DeleteCourseRequest,
 *   !proto.pb.Empty>}
 */
const methodDescriptor_CourseService_Delete = new grpc.web.MethodDescriptor(
  '/pb.CourseService/Delete',
  grpc.web.MethodType.UNARY,
  proto.pb.DeleteCourseRequest,
  empty_pb.Empty,
  /**
   * @param {!proto.pb.DeleteCourseRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  empty_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.pb.DeleteCourseRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.pb.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.pb.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.pb.CourseServiceClient.prototype.delete =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/pb.CourseService/Delete',
      request,
      metadata || {},
      methodDescriptor_CourseService_Delete,
      callback);
};


/**
 * @param {!proto.pb.DeleteCourseRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.pb.Empty>}
 *     Promise that resolves to the response
 */
proto.pb.CourseServicePromiseClient.prototype.delete =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/pb.CourseService/Delete',
      request,
      metadata || {},
      methodDescriptor_CourseService_Delete);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.pb.ListCourseRequest,
 *   !proto.pb.ListCourseResponse>}
 */
const methodDescriptor_CourseService_List = new grpc.web.MethodDescriptor(
  '/pb.CourseService/List',
  grpc.web.MethodType.UNARY,
  proto.pb.ListCourseRequest,
  proto.pb.ListCourseResponse,
  /**
   * @param {!proto.pb.ListCourseRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.pb.ListCourseResponse.deserializeBinary
);


/**
 * @param {!proto.pb.ListCourseRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.pb.ListCourseResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.pb.ListCourseResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.pb.CourseServiceClient.prototype.list =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/pb.CourseService/List',
      request,
      metadata || {},
      methodDescriptor_CourseService_List,
      callback);
};


/**
 * @param {!proto.pb.ListCourseRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.pb.ListCourseResponse>}
 *     Promise that resolves to the response
 */
proto.pb.CourseServicePromiseClient.prototype.list =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/pb.CourseService/List',
      request,
      metadata || {},
      methodDescriptor_CourseService_List);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.pb.BatchCreateCoursesRequest,
 *   !proto.pb.BatchCreateCoursesResponse>}
 */
const methodDescriptor_CourseService_BatchCreate = new grpc.web.MethodDescriptor(
  '/pb.CourseService/BatchCreate',
  grpc.web.MethodType.UNARY,
  proto.pb.BatchCreateCoursesRequest,
  proto.pb.BatchCreateCoursesResponse,
  /**
   * @param {!proto.pb.BatchCreateCoursesRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.pb.BatchCreateCoursesResponse.deserializeBinary
);


/**
 * @param {!proto.pb.BatchCreateCoursesRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.pb.BatchCreateCoursesResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.pb.BatchCreateCoursesResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.pb.CourseServiceClient.prototype.batchCreate =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/pb.CourseService/BatchCreate',
      request,
      metadata || {},
      methodDescriptor_CourseService_BatchCreate,
      callback);
};


/**
 * @param {!proto.pb.BatchCreateCoursesRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.pb.BatchCreateCoursesResponse>}
 *     Promise that resolves to the response
 */
proto.pb.CourseServicePromiseClient.prototype.batchCreate =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/pb.CourseService/BatchCreate',
      request,
      metadata || {},
      methodDescriptor_CourseService_BatchCreate);
};


module.exports = proto.pb;

