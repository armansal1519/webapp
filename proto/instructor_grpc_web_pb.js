/**
 * @fileoverview gRPC-Web generated client stub for pb
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.19.1
// source: instructor.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var empty_pb = require('./empty_pb.js')
const proto = {};
proto.pb = require('./instructor_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.pb.InstructorServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.pb.InstructorServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.pb.CreateInstructorRequest,
 *   !proto.pb.Instructor>}
 */
const methodDescriptor_InstructorService_Create = new grpc.web.MethodDescriptor(
  '/pb.InstructorService/Create',
  grpc.web.MethodType.UNARY,
  proto.pb.CreateInstructorRequest,
  proto.pb.Instructor,
  /**
   * @param {!proto.pb.CreateInstructorRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.pb.Instructor.deserializeBinary
);


/**
 * @param {!proto.pb.CreateInstructorRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.pb.Instructor)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.pb.Instructor>|undefined}
 *     The XHR Node Readable Stream
 */
proto.pb.InstructorServiceClient.prototype.create =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/pb.InstructorService/Create',
      request,
      metadata || {},
      methodDescriptor_InstructorService_Create,
      callback);
};


/**
 * @param {!proto.pb.CreateInstructorRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.pb.Instructor>}
 *     Promise that resolves to the response
 */
proto.pb.InstructorServicePromiseClient.prototype.create =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/pb.InstructorService/Create',
      request,
      metadata || {},
      methodDescriptor_InstructorService_Create);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.pb.GetInstructorRequest,
 *   !proto.pb.Instructor>}
 */
const methodDescriptor_InstructorService_Get = new grpc.web.MethodDescriptor(
  '/pb.InstructorService/Get',
  grpc.web.MethodType.UNARY,
  proto.pb.GetInstructorRequest,
  proto.pb.Instructor,
  /**
   * @param {!proto.pb.GetInstructorRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.pb.Instructor.deserializeBinary
);


/**
 * @param {!proto.pb.GetInstructorRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.pb.Instructor)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.pb.Instructor>|undefined}
 *     The XHR Node Readable Stream
 */
proto.pb.InstructorServiceClient.prototype.get =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/pb.InstructorService/Get',
      request,
      metadata || {},
      methodDescriptor_InstructorService_Get,
      callback);
};


/**
 * @param {!proto.pb.GetInstructorRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.pb.Instructor>}
 *     Promise that resolves to the response
 */
proto.pb.InstructorServicePromiseClient.prototype.get =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/pb.InstructorService/Get',
      request,
      metadata || {},
      methodDescriptor_InstructorService_Get);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.pb.UpdateInstructorRequest,
 *   !proto.pb.Instructor>}
 */
const methodDescriptor_InstructorService_Update = new grpc.web.MethodDescriptor(
  '/pb.InstructorService/Update',
  grpc.web.MethodType.UNARY,
  proto.pb.UpdateInstructorRequest,
  proto.pb.Instructor,
  /**
   * @param {!proto.pb.UpdateInstructorRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.pb.Instructor.deserializeBinary
);


/**
 * @param {!proto.pb.UpdateInstructorRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.pb.Instructor)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.pb.Instructor>|undefined}
 *     The XHR Node Readable Stream
 */
proto.pb.InstructorServiceClient.prototype.update =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/pb.InstructorService/Update',
      request,
      metadata || {},
      methodDescriptor_InstructorService_Update,
      callback);
};


/**
 * @param {!proto.pb.UpdateInstructorRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.pb.Instructor>}
 *     Promise that resolves to the response
 */
proto.pb.InstructorServicePromiseClient.prototype.update =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/pb.InstructorService/Update',
      request,
      metadata || {},
      methodDescriptor_InstructorService_Update);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.pb.DeleteInstructorRequest,
 *   !proto.pb.Empty>}
 */
const methodDescriptor_InstructorService_Delete = new grpc.web.MethodDescriptor(
  '/pb.InstructorService/Delete',
  grpc.web.MethodType.UNARY,
  proto.pb.DeleteInstructorRequest,
  empty_pb.Empty,
  /**
   * @param {!proto.pb.DeleteInstructorRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  empty_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.pb.DeleteInstructorRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.pb.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.pb.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.pb.InstructorServiceClient.prototype.delete =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/pb.InstructorService/Delete',
      request,
      metadata || {},
      methodDescriptor_InstructorService_Delete,
      callback);
};


/**
 * @param {!proto.pb.DeleteInstructorRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.pb.Empty>}
 *     Promise that resolves to the response
 */
proto.pb.InstructorServicePromiseClient.prototype.delete =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/pb.InstructorService/Delete',
      request,
      metadata || {},
      methodDescriptor_InstructorService_Delete);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.pb.ListInstructorRequest,
 *   !proto.pb.ListInstructorResponse>}
 */
const methodDescriptor_InstructorService_List = new grpc.web.MethodDescriptor(
  '/pb.InstructorService/List',
  grpc.web.MethodType.UNARY,
  proto.pb.ListInstructorRequest,
  proto.pb.ListInstructorResponse,
  /**
   * @param {!proto.pb.ListInstructorRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.pb.ListInstructorResponse.deserializeBinary
);


/**
 * @param {!proto.pb.ListInstructorRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.pb.ListInstructorResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.pb.ListInstructorResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.pb.InstructorServiceClient.prototype.list =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/pb.InstructorService/List',
      request,
      metadata || {},
      methodDescriptor_InstructorService_List,
      callback);
};


/**
 * @param {!proto.pb.ListInstructorRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.pb.ListInstructorResponse>}
 *     Promise that resolves to the response
 */
proto.pb.InstructorServicePromiseClient.prototype.list =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/pb.InstructorService/List',
      request,
      metadata || {},
      methodDescriptor_InstructorService_List);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.pb.BatchCreateInstructorsRequest,
 *   !proto.pb.BatchCreateInstructorsResponse>}
 */
const methodDescriptor_InstructorService_BatchCreate = new grpc.web.MethodDescriptor(
  '/pb.InstructorService/BatchCreate',
  grpc.web.MethodType.UNARY,
  proto.pb.BatchCreateInstructorsRequest,
  proto.pb.BatchCreateInstructorsResponse,
  /**
   * @param {!proto.pb.BatchCreateInstructorsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.pb.BatchCreateInstructorsResponse.deserializeBinary
);


/**
 * @param {!proto.pb.BatchCreateInstructorsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.pb.BatchCreateInstructorsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.pb.BatchCreateInstructorsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.pb.InstructorServiceClient.prototype.batchCreate =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/pb.InstructorService/BatchCreate',
      request,
      metadata || {},
      methodDescriptor_InstructorService_BatchCreate,
      callback);
};


/**
 * @param {!proto.pb.BatchCreateInstructorsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.pb.BatchCreateInstructorsResponse>}
 *     Promise that resolves to the response
 */
proto.pb.InstructorServicePromiseClient.prototype.batchCreate =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/pb.InstructorService/BatchCreate',
      request,
      metadata || {},
      methodDescriptor_InstructorService_BatchCreate);
};


module.exports = proto.pb;

