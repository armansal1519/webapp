/**
 * @fileoverview gRPC-Web generated client stub for pb
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.19.1
// source: auth.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var instructor_pb = require('./instructor_pb.js')

var user_pb = require('./user_pb.js')
const proto = {};
proto.pb = require('./auth_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.pb.AuthServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.pb.AuthServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.pb.InstructorRegisterReq,
 *   !proto.pb.InstructorRegisterResp>}
 */
const methodDescriptor_AuthService_InstructorRegister = new grpc.web.MethodDescriptor(
  '/pb.AuthService/InstructorRegister',
  grpc.web.MethodType.UNARY,
  proto.pb.InstructorRegisterReq,
  proto.pb.InstructorRegisterResp,
  /**
   * @param {!proto.pb.InstructorRegisterReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.pb.InstructorRegisterResp.deserializeBinary
);


/**
 * @param {!proto.pb.InstructorRegisterReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.pb.InstructorRegisterResp)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.pb.InstructorRegisterResp>|undefined}
 *     The XHR Node Readable Stream
 */
proto.pb.AuthServiceClient.prototype.instructorRegister =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/pb.AuthService/InstructorRegister',
      request,
      metadata || {},
      methodDescriptor_AuthService_InstructorRegister,
      callback);
};


/**
 * @param {!proto.pb.InstructorRegisterReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.pb.InstructorRegisterResp>}
 *     Promise that resolves to the response
 */
proto.pb.AuthServicePromiseClient.prototype.instructorRegister =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/pb.AuthService/InstructorRegister',
      request,
      metadata || {},
      methodDescriptor_AuthService_InstructorRegister);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.pb.InstructorLoginReq,
 *   !proto.pb.InstructorLoginResp>}
 */
const methodDescriptor_AuthService_InstructorLogin = new grpc.web.MethodDescriptor(
  '/pb.AuthService/InstructorLogin',
  grpc.web.MethodType.UNARY,
  proto.pb.InstructorLoginReq,
  proto.pb.InstructorLoginResp,
  /**
   * @param {!proto.pb.InstructorLoginReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.pb.InstructorLoginResp.deserializeBinary
);


/**
 * @param {!proto.pb.InstructorLoginReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.pb.InstructorLoginResp)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.pb.InstructorLoginResp>|undefined}
 *     The XHR Node Readable Stream
 */
proto.pb.AuthServiceClient.prototype.instructorLogin =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/pb.AuthService/InstructorLogin',
      request,
      metadata || {},
      methodDescriptor_AuthService_InstructorLogin,
      callback);
};


/**
 * @param {!proto.pb.InstructorLoginReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.pb.InstructorLoginResp>}
 *     Promise that resolves to the response
 */
proto.pb.AuthServicePromiseClient.prototype.instructorLogin =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/pb.AuthService/InstructorLogin',
      request,
      metadata || {},
      methodDescriptor_AuthService_InstructorLogin);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.pb.UserRegisterReq,
 *   !proto.pb.UserRegisterResp>}
 */
const methodDescriptor_AuthService_UserRegister = new grpc.web.MethodDescriptor(
  '/pb.AuthService/UserRegister',
  grpc.web.MethodType.UNARY,
  proto.pb.UserRegisterReq,
  proto.pb.UserRegisterResp,
  /**
   * @param {!proto.pb.UserRegisterReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.pb.UserRegisterResp.deserializeBinary
);


/**
 * @param {!proto.pb.UserRegisterReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.pb.UserRegisterResp)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.pb.UserRegisterResp>|undefined}
 *     The XHR Node Readable Stream
 */
proto.pb.AuthServiceClient.prototype.userRegister =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/pb.AuthService/UserRegister',
      request,
      metadata || {},
      methodDescriptor_AuthService_UserRegister,
      callback);
};


/**
 * @param {!proto.pb.UserRegisterReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.pb.UserRegisterResp>}
 *     Promise that resolves to the response
 */
proto.pb.AuthServicePromiseClient.prototype.userRegister =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/pb.AuthService/UserRegister',
      request,
      metadata || {},
      methodDescriptor_AuthService_UserRegister);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.pb.UserLoginReq,
 *   !proto.pb.UserLoginResp>}
 */
const methodDescriptor_AuthService_UserLogin = new grpc.web.MethodDescriptor(
  '/pb.AuthService/UserLogin',
  grpc.web.MethodType.UNARY,
  proto.pb.UserLoginReq,
  proto.pb.UserLoginResp,
  /**
   * @param {!proto.pb.UserLoginReq} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.pb.UserLoginResp.deserializeBinary
);


/**
 * @param {!proto.pb.UserLoginReq} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.pb.UserLoginResp)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.pb.UserLoginResp>|undefined}
 *     The XHR Node Readable Stream
 */
proto.pb.AuthServiceClient.prototype.userLogin =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/pb.AuthService/UserLogin',
      request,
      metadata || {},
      methodDescriptor_AuthService_UserLogin,
      callback);
};


/**
 * @param {!proto.pb.UserLoginReq} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.pb.UserLoginResp>}
 *     Promise that resolves to the response
 */
proto.pb.AuthServicePromiseClient.prototype.userLogin =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/pb.AuthService/UserLogin',
      request,
      metadata || {},
      methodDescriptor_AuthService_UserLogin);
};


module.exports = proto.pb;

